# Polynomial Regression

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
from csvApp.models import dataFields

from plotly.offline import plot
import plotly.graph_objs as go

def polynomial():

    # Importing the dataset

    temp_csv_file=os.getcwd() + "\\temp_files\\tempcsv.csv"
    dataset = pd.read_csv(temp_csv_file)

    var = dataFields.y_field
    print(var)

    # Set the dependent variable array
    y=dataset[var].values

    # Set the independent variables array
    xlist=[]

    for col in dataset.columns:
        if not isinstance(dataset[col].values.tolist()[0],str) and col != var:
            xlist.append(col)

    X = dataset[xlist].values    

    print("############## #############")
    print("############## #############")

    Deg = 2

    # Apply the polynomial features on X
    from sklearn.preprocessing import PolynomialFeatures
    poly_reg= PolynomialFeatures(degree = Deg)
    X_poly=poly_reg.fit_transform(X)

    # Apply linear regression on data generated by Polynomial features
    from sklearn.linear_model import LinearRegression
    lin_reg = LinearRegression()
    lin_reg.fit(X_poly,y)

    y_pred = lin_reg.predict(X_poly)

    degree = Deg

    return_dic = {'X': X, 'y': y, 'y_pred': y_pred, 'degree' : degree}
    
    return return_dic

## Function to print the Graph ##
def polynomial_graph(request):

    pred_values = polynomial()

    X = pred_values['X'][:,0].tolist()
    y = pred_values['y']
    y_pred = pred_values['y_pred']
    degree = pred_values['degree']


    fig = go.Figure()
    fig.add_trace(go.Scatter(x=X, y=y,
            mode='markers', name='actual values',
            marker_color='green'))
        
    fig.add_trace(go.Scatter(x=X, y=y_pred,
            mode='lines', name='predicted',
            marker_color='red'))

    fig.update_layout(
            autosize=False,
            width=500,
            height=400,
            yaxis = dict(
                title_text = "Predicted Output"
                        ),
            xaxis = dict(
                title_text = "Independent Variables"
                        )
            )

    plt_div = plot(fig, output_type='div')

    context = {
        'plt_div'   : plt_div,
        'degree'    : degree,
        'modelType' : dataFields.modelType,
        'modelName' : dataFields.modelName,
    }
        
    return context